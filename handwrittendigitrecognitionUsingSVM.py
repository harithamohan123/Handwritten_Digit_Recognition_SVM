# -*- coding: utf-8 -*-
"""HandwrittenDigitRecognition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cm8CZwD4vdTr9l46NyQl7rU024CnDOmm

Import Libraries
"""

import numpy as np
from sklearn.datasets import load_digits

"""Load dataset"""

dataset = load_digits()

"""Summarize dataset"""

print(dataset.data)
print(dataset.target)

print(dataset.data.shape)
print(dataset.images.shape)

dataImageLength = len(dataset.images)
print(dataImageLength)

"""Visualise data"""

n = 9 # Number of sample out of sample total 1797
 
import matplotlib.pyplot as plt
plt.gray()
plt.matshow(dataset.images[n])
plt.show()

dataset.images[n]

"""Segregate Datset into x(input) and y(output)

Input - Pixels | Output - Class
"""

x = dataset.images.reshape(dataImageLength, -1)
print(x)
y = dataset.target
print(y)

"""Split Dataset into train and test"""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state=0)
print(x_train.shape)
print(x_test.shape)

from sklearn import svm
model = svm.SVC(kernel = 'linear')
model.fit(x_train,y_train)

"""Prediction of Digit from Test Data"""

n = 23
result = model.predict(dataset.images[n].reshape((1,-1))) 
plt.imshow(dataset.images[n], cmap = plt.cm.gray_r, interpolation = 'nearest')
print(result)
print("\n")
plt.axis('off')
plt.title('%i' %result)
plt.show()

y_pred = model.predict(x_test)
print(np.concatenate((y_pred.reshape(len(y_pred), 1), y_test.reshape(len(y_test), 1)),1))

"""Model Evaluation """

from sklearn.metrics import accuracy_score
print("Accuracy of the model = {0}%".format(accuracy_score(y_test,y_pred)*100))

"""Optional : Use RBF for good Accuray
( Below code shows:
    1.comparison between linear and rbf kernel
    2.Effect of Tunning parameter
   
"""

from sklearn import svm
model1 = svm.SVC(kernel = 'linear')
model2 = svm.SVC(kernel = 'rbf') #gamma default value = 0.1
model3 = svm.SVC(gamma = 0.001) #default kernel =  rbf  kernel
model4 = svm.SVC(gamma = 0.001, C = 0.73)

model1.fit(x_train,y_train)
model2.fit(x_train,y_train)
model3.fit(x_train,y_train)
model4.fit(x_train,y_train)

y_predModel1 = model1.predict(x_test)
y_predModel2 = model2.predict(x_test)
y_predModel3 = model3.predict(x_test)
y_predModel4 = model4.predict(x_test)

print("Accuracy of the model : {0}%".format(accuracy_score(y_test,y_predModel1)*100))
print("Accuracy of the model : {0}%".format(accuracy_score(y_test,y_predModel2)*100))
print("Accuracy of the model : {0}%".format(accuracy_score(y_test,y_predModel3)*100))
print("Accuracy of the model : {0}%".format(accuracy_score(y_test,y_predModel4)*100))

